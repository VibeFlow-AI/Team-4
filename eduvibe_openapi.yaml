
openapi: 3.0.3
info:
  title: EduVibe API
  version: "1.0.0"
  description: |
    REST API that powers the EduVibe mentoring platform.  
    Provides authentication, onboarding, mentor discovery, booking flow, and dashboards
    as described in the hackathon Figma designs and case study.

servers:
  - url: https://api.eduvibe.ai/api/v1

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        role: { type: string, enum: [student, mentor] }
        name: { type: string }
        email: { type: string, format: email }
        avatarUrl: { type: string, format: uri, nullable: true }
      required: [id, role, name, email]

    PublicUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            email: { readOnly: true }

    StudentOnboarding:
      type: object
      properties:
        fullName: { type: string }
        age: { type: integer, minimum: 5 }
        contactNumber: { type: string }
        school: { type: string }
        educationLevel: { type: string }
        subjects:
          type: array
          items: { type: string }
        skills:
          type: array
          items:
            type: object
            properties:
              subject: { type: string }
              level: { type: string }
        preferredLearningStyle: { type: string, nullable: true }
        accommodations: { type: string, nullable: true }
      required: [fullName, age, contactNumber, school, educationLevel, subjects]

    MentorOnboarding:
      type: object
      properties:
        fullName: { type: string }
        age: { type: integer }
        contactNumber: { type: string }
        bio: { type: string }
        professionalRole: { type: string }
        subjects:
          type: array
          items: { type: string }
        experienceYears: { type: integer }
        preferredStudentLevels:
          type: array
          items: { type: string }
        linkedinUrl: { type: string, format: uri, nullable: true }
        portfolioUrl: { type: string, format: uri, nullable: true }
        avatarUrl: { type: string, format: uri, nullable: true }
      required: [fullName, age, contactNumber, bio, professionalRole, subjects, experienceYears]

    Booking:
      type: object
      properties:
        id: { type: string, format: uuid }
        studentId: { type: string, format: uuid }
        mentorId: { type: string, format: uuid }
        sessionDateTime: { type: string, format: date-time }
        durationMinutes: { type: integer, example: 120 }
        paymentProofUrl: { type: string, format: uri }
        status: { type: string, enum: [pending, confirmed, in-progress, completed, cancelled] }
      required: [id, studentId, mentorId, sessionDateTime, durationMinutes, paymentProofUrl, status]

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: integer }
            message: { type: string }
            details:
              type: array
              items: { type: string }
      required: [error]

paths:
  /auth/register:
    post:
      summary: Register as student or mentor
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role: { type: string, enum: [student, mentor] }
                email: { type: string, format: email }
                password: { type: string, format: password }
                name: { type: string }
              required: [role, email, password, name]
      responses:
        '201':
          description: JWT pair returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  refreshToken: { type: string }
                  expiresIn: { type: integer }
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/login:
    post:
      summary: Login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
              required: [email, password]
      responses:
        '200':
          description: JWT pair returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  refreshToken: { type: string }
                  expiresIn: { type: integer }
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/refresh:
    post:
      summary: Refresh JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken: { type: string }
              required: [refreshToken]
      responses:
        '200':
          description: New JWT issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  refreshToken: { type: string }
                  expiresIn: { type: integer }

  /auth/logout:
    post:
      summary: Logout (invalidate refresh token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken: { type: string }
              required: [refreshToken]
      responses:
        '200':
          description: Logged out message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /users/me:
    get:
      summary: Get current user profile
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    patch:
      summary: Update current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Public user profile
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Public profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'

  /students/onboarding:
    post:
      summary: Complete student onboarding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentOnboarding'
      responses:
        '201':
          description: Student profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /students/{id}:
    get:
      summary: Retrieve student profile
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Student profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /students/{id}/bookings:
    get:
      summary: List bookings for student
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, confirmed, in-progress, completed, cancelled]
      responses:
        '200':
          description: Array of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'

  /mentors/onboarding:
    post:
      summary: Complete mentor onboarding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorOnboarding'
      responses:
        '201':
          description: Mentor profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /mentors/{id}:
    get:
      summary: Retrieve mentor profile
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Mentor profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /mentors:
    get:
      summary: Search mentors
      parameters:
        - in: query
          name: subjects
          schema: { type: array, items: { type: string }, style: form, explode: false }
        - in: query
          name: level
          schema: { type: string }
        - in: query
          name: language
          schema: { type: string }
        - in: query
          name: duration
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string, enum: [rating, price] }
      responses:
        '200':
          description: Paginated mentor list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  page: { type: integer }
                  total: { type: integer }

  /mentors/recommended:
    get:
      summary: List personalised mentor recommendations
      responses:
        '200':
          description: Recommended mentors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /mentors/{id}/sessions:
    get:
      summary: List mentor sessions
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'

  /mentors/{id}/analytics:
    get:
      summary: Mentor dashboard analytics
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  agePie:
                    type: object
                    additionalProperties: { type: integer }
                  subjectBar:
                    type: object
                    additionalProperties: { type: integer }

  /bookings:
    post:
      summary: Create a booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mentorId: { type: string, format: uuid }
                sessionDateTime: { type: string, format: date-time }
                paymentProofUrl: { type: string, format: uri }
              required: [mentorId, sessionDateTime, paymentProofUrl]
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'

  /bookings/{id}:
    get:
      summary: Get booking details
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'

    delete:
      summary: Cancel a booking
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Booking cancelled

  /sessions/{id}/status:
    patch:
      summary: Update session status
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [confirmed, in-progress, completed]
              required: [status]
      responses:
        '200':
          description: Updated booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'

